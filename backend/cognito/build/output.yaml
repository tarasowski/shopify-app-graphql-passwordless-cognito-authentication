AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito User Pool for Shopify Authorization Service
Parameters:
  ReplyEmail:
    Type: String
    Default: dimitri@tarasowki.de
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 5
    MemorySize: 128
Resources:
  DefineShopifyAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      Description: Defines the challenge
      Handler: /src/define-auth-challenge.handler
      CodeUri: s3://shopify.datastack.de/45f9f8bc28f638410868923697852219
  CreateShopifyAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      Description: Creates the challenge
      Handler: /src/create-auth-challenge.handler
      CodeUri: s3://shopify.datastack.de/45f9f8bc28f638410868923697852219
  VerifyShopifyAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      Description: Verifies the challenge
      Handler: /src/verify-auth-challenge.handler
      Environment:
        Variables:
          JWT_SECRET: JgVWQQH4vb8CA8gryeEBpHIU2M5HqKyN
      CodeUri: s3://shopify.datastack.de/45f9f8bc28f638410868923697852219
  ShopifyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ShopifyUserPool
      EmailConfiguration:
        ReplyToEmailAddress:
          Ref: ReplyEmail
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
      - AttributeDataType: String
        Mutable: true
        Name: access_token
      - AttributeDataType: String
        Mutable: true
        Name: internal_domain
      - AttributeDataType: String
        Name: shop_id
      UsernameAttributes:
      - email
      LambdaConfig:
        CreateAuthChallenge:
          Fn::GetAtt:
          - CreateShopifyAuthChallenge
          - Arn
        DefineAuthChallenge:
          Fn::GetAtt:
          - DefineShopifyAuthChallenge
          - Arn
        VerifyAuthChallengeResponse:
          Fn::GetAtt:
          - VerifyShopifyAuthChallenge
          - Arn
  ShopifyCustomLoginClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: oauth-client
      GenerateSecret: false
      ExplicitAuthFlows:
      - CUSTOM_AUTH_FLOW_ONLY
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: ShopifyUserPool
  DefineShopifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - DefineShopifyAuthChallenge
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ShopifyUserPool
        - Arn
  CreateShopifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - CreateShopifyAuthChallenge
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ShopifyUserPool
        - Arn
  VerifyShopifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - VerifyShopifyAuthChallenge
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ShopifyUserPool
        - Arn
Outputs:
  ShopifyCognitoUserPool:
    Description: User pool that handles authorization of the app
    Value:
      Ref: ShopifyUserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitUserPoolExport
